openapi: 3.0.3
info:
  title: Egon Status API
  version: 0.1
  contact:
    url: https://github.com/Egon-Framework/status-api
  description: |-
    ## API Overview
    
    The status API is used for monitoring the status of Egon nodes and pipelines.
    API endpoints are broken into two categories based on general use case.
    
    **API Status** endpoints are provided for checking API health, version, and documentation.
    These endpoints provide no information about running Egon processes and can be accessed without authentication.
    
    **Pipeline Metadata** endpoints expose information about user submitted Egon pipelines.
    These endpoints are authenticated via API tokens.
    Each token is tied to an individual pipeline and provides access to information about a single running pipeline.
    Tokens are valid for the life-time of the associated pipeline and expire once the pipeline is no longer running.
servers:
  - url: https://{url}:{port}/V0
    description: Local development server
    variables:
      url:
        default: localhost
        description: The base API URL
      port:
        default: '4010'
        description: The API port number
tags:
  - name: API Status
    description: Retrieve information concerning the API's health and version
  - name: Pipeline Metadata
    description: Metadata and status information for currently running pipeline components
paths:
  /:
    get:
      tags:
        - API Status
      summary: Base API URL
      description: The base API URL points users at the API documentation.
      operationId: root
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: 'The Egon Framework status API. See https://egon-framework.github.io/status-api/ for more details.'
  /health:
    get:
      tags:
        - API Status
      summary: API health check
      description: Check the API health status.
      operationId: healthCheck
      responses:
        '200':
          description: OK
  /version:
    get:
      tags:
        - API Status
      summary: Get the API version
      description: Return the current API version number.
      operationId: version
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Version'
              examples:
                version 0.1:
                  $ref: '#/components/examples/Version'
  /pipeline/{pipelineId}:
    get:
      tags:
        - Pipeline Metadata
      security:
        - TokenQueryAuth: [ ]
      summary: Get pipeline metadata
      description: Get metadata for a pipeline by its ID.
      operationId: getPipelineById
      parameters:
        - name: pipelineId
          in: path
          description: Pipeline ID to return data for
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pipeline'
              examples:
                etl:
                  $ref: '#/components/examples/ETLPipeline'
                multi-node:
                  $ref: '#/components/examples/MultiNodePipeline'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/MissingResourceError'
    post:
      tags:
        - Pipeline Metadata
      security:
        - TokenQueryAuth: [ ]
      summary: Store new pipeline metadata
      description: Store metadata information for a new pipeline.
      operationId: postPipelineById
      parameters:
        - name: pipelineId
          in: path
          description: Pipeline ID to store data for
          required: true
          schema:
            type: string
      requestBody:
        description: Pipeline metadata
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pipeline'
      responses:
        '201':
          description: Created
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /node/{nodeID}:
    get:
      tags:
        - Pipeline Metadata
      security:
        - TokenQueryAuth: [ ]
      summary: Get node metadata
      description: Get metadata for a single pipeline node by its ID.
      operationId: getNodeById
      parameters:
        - name: nodeID
          in: path
          description: Node ID to return data for
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
              examples:
                extract:
                  $ref: '#/components/examples/ExtractNode'
                transform:
                  $ref: '#/components/examples/TransformNode'
                load:
                  $ref: '#/components/examples/LoadNode'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/MissingResourceError'
components:
  responses:
    UnauthorizedError:
      description: Authentication information is missing or invalid
    MissingResourceError:
      description: Resource not found
  examples:
    Version:
      description: Version 0.1
      value:
        version: "0.1"
    ExtractNode:
      summary: Extract node for an ETL pipeline
      value:
        id: 760c45a4-9a65-418f-a442-aa8c3f22cad2
        name: Extract
        description: Load data into the pipeline
        instances: 1
        status: stopped
    TransformNode:
      summary: Transform node in an ETL pipeline
      value:
        id: 1da5a095-00af-45fe-ba1b-ea9576439f75
        name: Transform
        description: Transform and analyze pipeline data
        instances: 4
        status: running
    LoadNode:
      summary: The load step in an ETL pipeline
      value:
        id: ae3de17e-1c7a-4817-b619-b5aa984ffe51
        name: Load
        instances: 2
        status: running
    ETLPipeline:
      summary: A generic ETL Pipeline
      value:
        id: 57d92d7e-58c0-48ec-bed2-2e8b507161bb
        name: ETL Pipeline
        description: An example ETL pipeline with three nodes.
        launched: 2020-07-21T17:32:28Z
        status: running
        nodes: [
          760c45a4-9a65-418f-a442-aa8c3f22cad2,
          1da5a095-00af-45fe-ba1b-ea9576439f75,
          ae3de17e-1c7a-4817-b619-b5aa984ffe51,
        ]
        edges: [
          {
            upstream_node: 760c45a4-9a65-418f-a442-aa8c3f22cad2,
            output_id: 9e572320-02be-4d79-bd17-f63ea2489c1f,
            output_name: Raw data output,
            downstream_node: 1da5a095-00af-45fe-ba1b-ea9576439f75,
            input_id: 6e4524b6-2997-4a21-a49b-228b88ba5c5b,
            input_name: Raw data input,
          }, {
            upstream_node: 1da5a095-00af-45fe-ba1b-ea9576439f75,
            output_id: afaeb28d-d31a-4c42-a47f-41fd414f9504,
            output_name: Processed data output,
            downstream_node: ae3de17e-1c7a-4817-b619-b5aa984ffe51,
            input_id: d645dd0e-8942-46dd-8d2c-01f2b7bba946,
            input_name: Processed data input,
          }
        ]
    MultiNodePipeline:
      summary: A Pipeline with multi-node connections
      value:
        id: 8860b4ed-1815-4b0d-9e2e-6fc9ad62b44d
        name: Multi-Node Pipeline
        description: An example pipeline with multi-node connections.
        launched: 2019-11-30T09:04:15Z
        status: degraded
        nodes: [
          8d49ae44-1354-4b63-9100-cab3f5f7dd76,
          4f587fdd-ed59-4bba-9cc6-10fbf93c362b,
          ca014279-3e26-425c-afb8-6977b042fed9,
          c252eb0d-e930-4192-8421-733903a49c95,
          0614cf93-f935-43c2-ab47-4a52e692d485
        ]
        edges: [
          {
            upstream_node: 8d49ae44-1354-4b63-9100-cab3f5f7dd76,
            output_id: f09e8c6f-3062-48b1-9e89-0d6aae314505,
            output_name: Output data,
            downstream_node: ca014279-3e26-425c-afb8-6977b042fed9,
            input_id: 47d29f94-4590-4f55-9574-f721869bba32,
            input_name: Data source 1,
          }, {
            upstream_node: 4f587fdd-ed59-4bba-9cc6-10fbf93c362b,
            output_id: 8c382374-49a6-42f4-809b-30fad72f22b5,
            output_name: Output data,
            downstream_node: ca014279-3e26-425c-afb8-6977b042fed9,
            input_id: 47d29f94-4590-4f55-9574-f721869bba32,
            input_name: Data source 2,
          }, {
            upstream_node: ca014279-3e26-425c-afb8-6977b042fed9,
            output_id: 6834c9eb-9b02-48d6-8c93-d9d485634b18,
            output_name: Processed data,
            downstream_node: c252eb0d-e930-4192-8421-733903a49c95,
            input_id: 0e911502-b8e8-4619-85e4-2807c83842d6,
            input_name: Processed data,
          }, {
            upstream_node: ca014279-3e26-425c-afb8-6977b042fed9,
            output_id: 6834c9eb-9b02-48d6-8c93-d9d485634b18,
            output_name: Processed data,
            downstream_node: 0614cf93-f935-43c2-ab47-4a52e692d485,
            input_id: 4a03041c-da56-4474-9550-42c4583b15e3,
            input_name: Processed data,
          },
        ]
  schemas:
    Version: # The API version number
      required:
        - version
      properties:
        version:
          type: string
          pattern: ^\d*\.\d*$ # Major and minor version only
      example:
        $ref: '#/components/examples/Version/value'
    Node: # Meta data for a given node
      required:
        - id
        - name
        - instances
        - status
      type: object
      properties:
        id:
          type: string
          pattern: ^[\da-f]{8}-\w{4}-\w{4}-\w{4}-\w{12}$ # UUID4 format
        name:
          type: string
        description:
          type: string
        instances:
          type: integer
        status:
          type: string
          enum: [ 'launching', 'running', 'stopped', 'degraded', 'errored', 'unknown' ]
      example:
        $ref: '#/components/examples/ExtractNode/value'
    Connection: # Relationship between two individual nodes
      required:
        - upstream_node
        - output_id
        - output_name
        - downstream_node
        - input_id
        - input_name
      type: object
      properties:
        upstream_node:
          type: string
          pattern: ^[\da-f]{8}-\w{4}-\w{4}-\w{4}-\w{12}$ # UUID4 format
        output_id:
          type: string
          pattern: ^[\da-f]{8}-\w{4}-\w{4}-\w{4}-\w{12}$ # UUID4 format
        output_name:
          type: string
        downstream_node:
          type: string
          pattern: ^[\da-f]{8}-\w{4}-\w{4}-\w{4}-\w{12}$ # UUID4 format
        input_id:
          type: string
          pattern: ^[\da-f]{8}-\w{4}-\w{4}-\w{4}-\w{12}$ # UUID4 format
        input_name:
          type: string
    Pipeline: # Meta data for a given pipeline
      required:
        - id
        - name
        - description
        - launched
        - status
        - nodes
      type: object
      properties:
        id:
          type: string
          pattern: ^[\da-f]{8}-\w{4}-\w{4}-\w{4}-\w{12}$ # UUID4 format
        name:
          type: string
        description:
          type: string
        launched:
          type: string
          format: date-time
          pattern: ^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}Z$
        status:
          type: string
          enum: [ 'launching', 'running', 'stopped', 'degraded', 'errored', 'unknown' ]
        nodes: # Mapping of pipeline node IDs to downstream node IDs
          type: array
          items:
            type: string
            pattern: ^[\da-f]{8}-\w{4}-\w{4}-\w{4}-\w{12}$ # UUID4 format
        edges:
          type: array
          items:
            $ref: '#/components/schemas/Connection'
      example:
        $ref: '#/components/examples/ETLPipeline/value'
  securitySchemes:
    TokenQueryAuth:
      type: apiKey
      in: query
      name: token
      description: |-
        API tokens are temporary and limited in scope.
        User tokens provide access to information concerning a single running pipeline.
        Once the associated pipeline is no longer running, the credentials expire.
